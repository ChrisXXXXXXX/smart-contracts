/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface ICerosRouterInterface extends utils.Interface {
  functions: {
    "claim(address)": FunctionFragment;
    "deposit()": FunctionFragment;
    "depositABNBc(address,uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawABNBc(address,uint256)": FunctionFragment;
    "withdrawWithSlippage(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim"
      | "deposit"
      | "depositABNBc"
      | "withdraw"
      | "withdrawABNBc"
      | "withdrawWithSlippage"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositABNBc",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawABNBc",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWithSlippage",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositABNBc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawABNBc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWithSlippage",
    data: BytesLike
  ): Result;

  events: {
    "ChangeCeToken(address)": EventFragment;
    "ChangeCeTokenJoin(address)": EventFragment;
    "ChangeCertToken(address)": EventFragment;
    "ChangeCollateralToken(address)": EventFragment;
    "ChangeDao(address)": EventFragment;
    "ChangeDex(address)": EventFragment;
    "ChangePool(address)": EventFragment;
    "ChangeVault(address)": EventFragment;
    "Claim(address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "Withdrawal(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeCeToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeCeTokenJoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeCertToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeCollateralToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeDao"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeDex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface ChangeCeTokenEventObject {
  ceToken: string;
}
export type ChangeCeTokenEvent = TypedEvent<[string], ChangeCeTokenEventObject>;

export type ChangeCeTokenEventFilter = TypedEventFilter<ChangeCeTokenEvent>;

export interface ChangeCeTokenJoinEventObject {
  ceTokenJoin: string;
}
export type ChangeCeTokenJoinEvent = TypedEvent<
  [string],
  ChangeCeTokenJoinEventObject
>;

export type ChangeCeTokenJoinEventFilter =
  TypedEventFilter<ChangeCeTokenJoinEvent>;

export interface ChangeCertTokenEventObject {
  certToken: string;
}
export type ChangeCertTokenEvent = TypedEvent<
  [string],
  ChangeCertTokenEventObject
>;

export type ChangeCertTokenEventFilter = TypedEventFilter<ChangeCertTokenEvent>;

export interface ChangeCollateralTokenEventObject {
  collateralToken: string;
}
export type ChangeCollateralTokenEvent = TypedEvent<
  [string],
  ChangeCollateralTokenEventObject
>;

export type ChangeCollateralTokenEventFilter =
  TypedEventFilter<ChangeCollateralTokenEvent>;

export interface ChangeDaoEventObject {
  dao: string;
}
export type ChangeDaoEvent = TypedEvent<[string], ChangeDaoEventObject>;

export type ChangeDaoEventFilter = TypedEventFilter<ChangeDaoEvent>;

export interface ChangeDexEventObject {
  dex: string;
}
export type ChangeDexEvent = TypedEvent<[string], ChangeDexEventObject>;

export type ChangeDexEventFilter = TypedEventFilter<ChangeDexEvent>;

export interface ChangePoolEventObject {
  pool: string;
}
export type ChangePoolEvent = TypedEvent<[string], ChangePoolEventObject>;

export type ChangePoolEventFilter = TypedEventFilter<ChangePoolEvent>;

export interface ChangeVaultEventObject {
  vault: string;
}
export type ChangeVaultEvent = TypedEvent<[string], ChangeVaultEventObject>;

export type ChangeVaultEventFilter = TypedEventFilter<ChangeVaultEvent>;

export interface ClaimEventObject {
  recipient: string;
  token: string;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface DepositEventObject {
  account: string;
  token: string;
  amount: BigNumber;
  profit: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface WithdrawalEventObject {
  owner: string;
  recipient: string;
  token: string;
  amount: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface ICerosRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICerosRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositABNBc(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawABNBc(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawWithSlippage(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claim(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositABNBc(
    owner: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawABNBc(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawWithSlippage(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(overrides?: CallOverrides): Promise<BigNumber>;

    depositABNBc(
      owner: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawABNBc(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawWithSlippage(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ChangeCeToken(address)"(ceToken?: null): ChangeCeTokenEventFilter;
    ChangeCeToken(ceToken?: null): ChangeCeTokenEventFilter;

    "ChangeCeTokenJoin(address)"(
      ceTokenJoin?: null
    ): ChangeCeTokenJoinEventFilter;
    ChangeCeTokenJoin(ceTokenJoin?: null): ChangeCeTokenJoinEventFilter;

    "ChangeCertToken(address)"(certToken?: null): ChangeCertTokenEventFilter;
    ChangeCertToken(certToken?: null): ChangeCertTokenEventFilter;

    "ChangeCollateralToken(address)"(
      collateralToken?: null
    ): ChangeCollateralTokenEventFilter;
    ChangeCollateralToken(
      collateralToken?: null
    ): ChangeCollateralTokenEventFilter;

    "ChangeDao(address)"(dao?: null): ChangeDaoEventFilter;
    ChangeDao(dao?: null): ChangeDaoEventFilter;

    "ChangeDex(address)"(dex?: null): ChangeDexEventFilter;
    ChangeDex(dex?: null): ChangeDexEventFilter;

    "ChangePool(address)"(pool?: null): ChangePoolEventFilter;
    ChangePool(pool?: null): ChangePoolEventFilter;

    "ChangeVault(address)"(vault?: null): ChangeVaultEventFilter;
    ChangeVault(vault?: null): ChangeVaultEventFilter;

    "Claim(address,address,uint256)"(
      recipient?: string | null,
      token?: string | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(
      recipient?: string | null,
      token?: string | null,
      amount?: null
    ): ClaimEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      account?: string | null,
      token?: string | null,
      amount?: null,
      profit?: null
    ): DepositEventFilter;
    Deposit(
      account?: string | null,
      token?: string | null,
      amount?: null,
      profit?: null
    ): DepositEventFilter;

    "Withdrawal(address,address,address,uint256)"(
      owner?: string | null,
      recipient?: string | null,
      token?: string | null,
      amount?: null
    ): WithdrawalEventFilter;
    Withdrawal(
      owner?: string | null,
      recipient?: string | null,
      token?: string | null,
      amount?: null
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    claim(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositABNBc(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawABNBc(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawWithSlippage(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositABNBc(
      owner: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawABNBc(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawWithSlippage(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
