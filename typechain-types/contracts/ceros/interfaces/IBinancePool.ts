/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface IBinancePoolInterface extends utils.Interface {
  functions: {
    "getMinimumStake()": FunctionFragment;
    "getRelayerFee()": FunctionFragment;
    "pendingUnstakesOf(address)": FunctionFragment;
    "stakeAndClaimCerts()": FunctionFragment;
    "unstakeCerts(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getMinimumStake"
      | "getRelayerFee"
      | "pendingUnstakesOf"
      | "stakeAndClaimCerts"
      | "unstakeCerts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMinimumStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRelayerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingUnstakesOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAndClaimCerts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeCerts",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMinimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRelayerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingUnstakesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAndClaimCerts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeCerts",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IBinancePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBinancePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMinimumStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRelayerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingUnstakesOf(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeAndClaimCerts(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeCerts(
      recipient: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getMinimumStake(overrides?: CallOverrides): Promise<BigNumber>;

  getRelayerFee(overrides?: CallOverrides): Promise<BigNumber>;

  pendingUnstakesOf(
    claimer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakeAndClaimCerts(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeCerts(
    recipient: string,
    shares: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getMinimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    getRelayerFee(overrides?: CallOverrides): Promise<BigNumber>;

    pendingUnstakesOf(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeAndClaimCerts(overrides?: CallOverrides): Promise<void>;

    unstakeCerts(
      recipient: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getMinimumStake(overrides?: CallOverrides): Promise<BigNumber>;

    getRelayerFee(overrides?: CallOverrides): Promise<BigNumber>;

    pendingUnstakesOf(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeAndClaimCerts(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeCerts(
      recipient: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMinimumStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRelayerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingUnstakesOf(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeAndClaimCerts(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeCerts(
      recipient: string,
      shares: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
