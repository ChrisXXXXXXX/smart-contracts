/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface HelioProviderInterface extends utils.Interface {
  functions: {
    "changeCeToken(address)": FunctionFragment;
    "changeCollateralToken(address)": FunctionFragment;
    "changeDao(address)": FunctionFragment;
    "claimInABNBc(address)": FunctionFragment;
    "daoBurn(address,uint256)": FunctionFragment;
    "daoMint(address,uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "liquidation(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "provide()": FunctionFragment;
    "provideInABNBc(uint256)": FunctionFragment;
    "release(address,uint256)": FunctionFragment;
    "releaseInABNBc(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeCeToken"
      | "changeCollateralToken"
      | "changeDao"
      | "claimInABNBc"
      | "daoBurn"
      | "daoMint"
      | "initialize"
      | "liquidation"
      | "owner"
      | "paused"
      | "provide"
      | "provideInABNBc"
      | "release"
      | "releaseInABNBc"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeCeToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeCollateralToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "changeDao", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimInABNBc",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "daoBurn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "daoMint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "provide", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provideInABNBc",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseInABNBc",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeCeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimInABNBc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "provide", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideInABNBc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseInABNBc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ChangeCeToken(address)": EventFragment;
    "ChangeCeTokenJoin(address)": EventFragment;
    "ChangeCertToken(address)": EventFragment;
    "ChangeCollateralToken(address)": EventFragment;
    "ChangeDao(address)": EventFragment;
    "ChangeDex(address)": EventFragment;
    "ChangePool(address)": EventFragment;
    "ChangeVault(address)": EventFragment;
    "Claim(address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawal(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeCeToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeCeTokenJoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeCertToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeCollateralToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeDao"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeDex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface ChangeCeTokenEventObject {
  ceToken: string;
}
export type ChangeCeTokenEvent = TypedEvent<[string], ChangeCeTokenEventObject>;

export type ChangeCeTokenEventFilter = TypedEventFilter<ChangeCeTokenEvent>;

export interface ChangeCeTokenJoinEventObject {
  ceTokenJoin: string;
}
export type ChangeCeTokenJoinEvent = TypedEvent<
  [string],
  ChangeCeTokenJoinEventObject
>;

export type ChangeCeTokenJoinEventFilter =
  TypedEventFilter<ChangeCeTokenJoinEvent>;

export interface ChangeCertTokenEventObject {
  certToken: string;
}
export type ChangeCertTokenEvent = TypedEvent<
  [string],
  ChangeCertTokenEventObject
>;

export type ChangeCertTokenEventFilter = TypedEventFilter<ChangeCertTokenEvent>;

export interface ChangeCollateralTokenEventObject {
  collateralToken: string;
}
export type ChangeCollateralTokenEvent = TypedEvent<
  [string],
  ChangeCollateralTokenEventObject
>;

export type ChangeCollateralTokenEventFilter =
  TypedEventFilter<ChangeCollateralTokenEvent>;

export interface ChangeDaoEventObject {
  dao: string;
}
export type ChangeDaoEvent = TypedEvent<[string], ChangeDaoEventObject>;

export type ChangeDaoEventFilter = TypedEventFilter<ChangeDaoEvent>;

export interface ChangeDexEventObject {
  dex: string;
}
export type ChangeDexEvent = TypedEvent<[string], ChangeDexEventObject>;

export type ChangeDexEventFilter = TypedEventFilter<ChangeDexEvent>;

export interface ChangePoolEventObject {
  pool: string;
}
export type ChangePoolEvent = TypedEvent<[string], ChangePoolEventObject>;

export type ChangePoolEventFilter = TypedEventFilter<ChangePoolEvent>;

export interface ChangeVaultEventObject {
  vault: string;
}
export type ChangeVaultEvent = TypedEvent<[string], ChangeVaultEventObject>;

export type ChangeVaultEventFilter = TypedEventFilter<ChangeVaultEvent>;

export interface ClaimEventObject {
  recipient: string;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface DepositEventObject {
  account: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawalEventObject {
  owner: string;
  recipient: string;
  amount: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface HelioProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HelioProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeCeToken(
      ceToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeCollateralToken(
      collateralToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeDao(
      dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimInABNBc(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daoBurn(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    daoMint(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      collateralToken: string,
      certToken: string,
      ceToken: string,
      ceRouter: string,
      daoAddress: string,
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidation(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    provide(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    provideInABNBc(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    release(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseInABNBc(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  changeCeToken(
    ceToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeCollateralToken(
    collateralToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeDao(
    dao: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimInABNBc(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daoBurn(
    account: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  daoMint(
    account: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    collateralToken: string,
    certToken: string,
    ceToken: string,
    ceRouter: string,
    daoAddress: string,
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidation(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  provide(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  provideInABNBc(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  release(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseInABNBc(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeCeToken(ceToken: string, overrides?: CallOverrides): Promise<void>;

    changeCollateralToken(
      collateralToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeDao(dao: string, overrides?: CallOverrides): Promise<void>;

    claimInABNBc(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    daoBurn(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    daoMint(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      collateralToken: string,
      certToken: string,
      ceToken: string,
      ceRouter: string,
      daoAddress: string,
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidation(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    provide(overrides?: CallOverrides): Promise<BigNumber>;

    provideInABNBc(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    release(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    releaseInABNBc(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChangeCeToken(address)"(ceToken?: null): ChangeCeTokenEventFilter;
    ChangeCeToken(ceToken?: null): ChangeCeTokenEventFilter;

    "ChangeCeTokenJoin(address)"(
      ceTokenJoin?: null
    ): ChangeCeTokenJoinEventFilter;
    ChangeCeTokenJoin(ceTokenJoin?: null): ChangeCeTokenJoinEventFilter;

    "ChangeCertToken(address)"(certToken?: null): ChangeCertTokenEventFilter;
    ChangeCertToken(certToken?: null): ChangeCertTokenEventFilter;

    "ChangeCollateralToken(address)"(
      collateralToken?: null
    ): ChangeCollateralTokenEventFilter;
    ChangeCollateralToken(
      collateralToken?: null
    ): ChangeCollateralTokenEventFilter;

    "ChangeDao(address)"(dao?: null): ChangeDaoEventFilter;
    ChangeDao(dao?: null): ChangeDaoEventFilter;

    "ChangeDex(address)"(dex?: null): ChangeDexEventFilter;
    ChangeDex(dex?: null): ChangeDexEventFilter;

    "ChangePool(address)"(pool?: null): ChangePoolEventFilter;
    ChangePool(pool?: null): ChangePoolEventFilter;

    "ChangeVault(address)"(vault?: null): ChangeVaultEventFilter;
    ChangeVault(vault?: null): ChangeVaultEventFilter;

    "Claim(address,uint256)"(
      recipient?: string | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(recipient?: string | null, amount?: null): ClaimEventFilter;

    "Deposit(address,uint256)"(
      account?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(account?: string | null, amount?: null): DepositEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdrawal(address,address,uint256)"(
      owner?: string | null,
      recipient?: string | null,
      amount?: null
    ): WithdrawalEventFilter;
    Withdrawal(
      owner?: string | null,
      recipient?: string | null,
      amount?: null
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    changeCeToken(
      ceToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeCollateralToken(
      collateralToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeDao(
      dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimInABNBc(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daoBurn(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    daoMint(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      collateralToken: string,
      certToken: string,
      ceToken: string,
      ceRouter: string,
      daoAddress: string,
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidation(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    provide(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    provideInABNBc(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    release(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseInABNBc(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeCeToken(
      ceToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeCollateralToken(
      collateralToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeDao(
      dao: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimInABNBc(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daoBurn(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    daoMint(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      collateralToken: string,
      certToken: string,
      ceToken: string,
      ceRouter: string,
      daoAddress: string,
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidation(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provide(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    provideInABNBc(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    release(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseInABNBc(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
