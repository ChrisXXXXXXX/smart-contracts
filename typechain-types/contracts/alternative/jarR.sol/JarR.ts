/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface JarRInterface extends utils.Interface {
  functions: {
    "USB()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfWithRewards(address)": FunctionFragment;
    "cage()": FunctionFragment;
    "decimals()": FunctionFragment;
    "deny(address)": FunctionFragment;
    "exit(uint256)": FunctionFragment;
    "exitDelay()": FunctionFragment;
    "initialize(uint256,uint256)": FunctionFragment;
    "join(uint256)": FunctionFragment;
    "live()": FunctionFragment;
    "name()": FunctionFragment;
    "ratio()": FunctionFragment;
    "redeemBatch(address[])": FunctionFragment;
    "redeemables(address)": FunctionFragment;
    "rely(address)": FunctionFragment;
    "replenish(uint256)": FunctionFragment;
    "spread()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "unstakeTime(address)": FunctionFragment;
    "usbDeposit()": FunctionFragment;
    "wards(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "USB"
      | "balanceOf"
      | "balanceOfWithRewards"
      | "cage"
      | "decimals"
      | "deny"
      | "exit"
      | "exitDelay"
      | "initialize"
      | "join"
      | "live"
      | "name"
      | "ratio"
      | "redeemBatch"
      | "redeemables"
      | "rely"
      | "replenish"
      | "spread"
      | "symbol"
      | "totalSupply"
      | "unstakeTime"
      | "usbDeposit"
      | "wards"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "USB", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfWithRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "cage", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "exitDelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "join", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "ratio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemBatch",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "redeemables", values: [string]): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(
    functionFragment: "replenish",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "spread", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unstakeTime", values: [string]): string;
  encodeFunctionData(
    functionFragment: "usbDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;

  decodeFunctionResult(functionFragment: "USB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfWithRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitDelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ratio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "replenish", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spread", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usbDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;

  events: {
    "Cage()": EventFragment;
    "Exit(address,uint256)": EventFragment;
    "Initialized(uint256,uint256)": EventFragment;
    "Join(address,uint256)": EventFragment;
    "Redeem(address[])": EventFragment;
    "Replenished(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Join"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Replenished"): EventFragment;
}

export interface CageEventObject {}
export type CageEvent = TypedEvent<[], CageEventObject>;

export type CageEventFilter = TypedEventFilter<CageEvent>;

export interface ExitEventObject {
  user: string;
  amount: BigNumber;
}
export type ExitEvent = TypedEvent<[string, BigNumber], ExitEventObject>;

export type ExitEventFilter = TypedEventFilter<ExitEvent>;

export interface InitializedEventObject {
  duration: BigNumber;
  exitDelay: BigNumber;
}
export type InitializedEvent = TypedEvent<
  [BigNumber, BigNumber],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface JoinEventObject {
  user: string;
  amount: BigNumber;
}
export type JoinEvent = TypedEvent<[string, BigNumber], JoinEventObject>;

export type JoinEventFilter = TypedEventFilter<JoinEvent>;

export interface RedeemEventObject {
  user: string[];
}
export type RedeemEvent = TypedEvent<[string[]], RedeemEventObject>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface ReplenishedEventObject {
  reward: BigNumber;
}
export type ReplenishedEvent = TypedEvent<[BigNumber], ReplenishedEventObject>;

export type ReplenishedEventFilter = TypedEventFilter<ReplenishedEvent>;

export interface JarR extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JarRInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    USB(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfWithRewards(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deny(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exit(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _spread: BigNumberish,
      _exitDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    join(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    live(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ratio(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemBatch(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemables(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    rely(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replenish(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spread(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstakeTime(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    usbDeposit(overrides?: CallOverrides): Promise<[BigNumber]>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  USB(overrides?: CallOverrides): Promise<string>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfWithRewards(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cage(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deny(
    guy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exit(
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitDelay(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _spread: BigNumberish,
    _exitDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  join(
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  live(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  ratio(overrides?: CallOverrides): Promise<BigNumber>;

  redeemBatch(
    accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemables(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  rely(
    guy: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replenish(
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spread(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  unstakeTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  usbDeposit(overrides?: CallOverrides): Promise<BigNumber>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    USB(overrides?: CallOverrides): Promise<string>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWithRewards(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cage(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deny(guy: string, overrides?: CallOverrides): Promise<void>;

    exit(wad: BigNumberish, overrides?: CallOverrides): Promise<void>;

    exitDelay(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _spread: BigNumberish,
      _exitDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    join(wad: BigNumberish, overrides?: CallOverrides): Promise<void>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    ratio(overrides?: CallOverrides): Promise<BigNumber>;

    redeemBatch(accounts: string[], overrides?: CallOverrides): Promise<void>;

    redeemables(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rely(guy: string, overrides?: CallOverrides): Promise<void>;

    replenish(wad: BigNumberish, overrides?: CallOverrides): Promise<void>;

    spread(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    unstakeTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    usbDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Cage()"(): CageEventFilter;
    Cage(): CageEventFilter;

    "Exit(address,uint256)"(
      user?: string | null,
      amount?: BigNumberish | null
    ): ExitEventFilter;
    Exit(user?: string | null, amount?: BigNumberish | null): ExitEventFilter;

    "Initialized(uint256,uint256)"(
      duration?: BigNumberish | null,
      exitDelay?: BigNumberish | null
    ): InitializedEventFilter;
    Initialized(
      duration?: BigNumberish | null,
      exitDelay?: BigNumberish | null
    ): InitializedEventFilter;

    "Join(address,uint256)"(
      user?: string | null,
      amount?: BigNumberish | null
    ): JoinEventFilter;
    Join(user?: string | null, amount?: BigNumberish | null): JoinEventFilter;

    "Redeem(address[])"(user?: string[] | null): RedeemEventFilter;
    Redeem(user?: string[] | null): RedeemEventFilter;

    "Replenished(uint256)"(reward?: null): ReplenishedEventFilter;
    Replenished(reward?: null): ReplenishedEventFilter;
  };

  estimateGas: {
    USB(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWithRewards(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deny(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exit(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitDelay(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _spread: BigNumberish,
      _exitDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    join(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ratio(overrides?: CallOverrides): Promise<BigNumber>;

    redeemBatch(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemables(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    rely(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replenish(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spread(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    unstakeTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    usbDeposit(overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    USB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfWithRewards(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deny(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _spread: BigNumberish,
      _exitDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    join(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    live(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ratio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemBatch(
      accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemables(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rely(
      guy: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replenish(
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spread(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstakeTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usbDeposit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
