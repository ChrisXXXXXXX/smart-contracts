/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export type SaleStruct = {
  pos: BigNumberish;
  tab: BigNumberish;
  lot: BigNumberish;
  usr: string;
  tic: BigNumberish;
  top: BigNumberish;
};

export type SaleStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber
] & {
  pos: BigNumber;
  tab: BigNumber;
  lot: BigNumber;
  usr: string;
  tic: BigNumber;
  top: BigNumber;
};

export interface DAOInteractionInterface extends utils.Interface {
  functions: {
    "availableToBorrow(address,address)": FunctionFragment;
    "borrow(address,address,uint256)": FunctionFragment;
    "borrowApr(address)": FunctionFragment;
    "borrowed(address,address)": FunctionFragment;
    "buyFromAuction(address,uint256,uint256,uint256,address)": FunctionFragment;
    "collateralPrice(address)": FunctionFragment;
    "collateralRate(address)": FunctionFragment;
    "collateralTVL(address)": FunctionFragment;
    "currentLiquidationPrice(address,address)": FunctionFragment;
    "deny(address)": FunctionFragment;
    "deposit(address,address,uint256)": FunctionFragment;
    "depositTVL(address)": FunctionFragment;
    "discs(address)": FunctionFragment;
    "dog()": FunctionFragment;
    "drip(address)": FunctionFragment;
    "enableCollateralType(address,address,bytes32,address)": FunctionFragment;
    "estimatedLiquidationPrice(address,address,int256)": FunctionFragment;
    "free(address,address)": FunctionFragment;
    "getAllActiveAuctionsForToken(address)": FunctionFragment;
    "getTotalAuctionsCountForToken(address)": FunctionFragment;
    "getUsersInDebt()": FunctionFragment;
    "helioRewards()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address)": FunctionFragment;
    "jug()": FunctionFragment;
    "locked(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "payback(address,address,uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "rely(address)": FunctionFragment;
    "removeCollateralType(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCollateralDisc(address,address)": FunctionFragment;
    "setCollateralType(address,address,bytes32,address)": FunctionFragment;
    "setCores(address,address,address,address)": FunctionFragment;
    "setRewards(address)": FunctionFragment;
    "setUSBApprove()": FunctionFragment;
    "spotter()": FunctionFragment;
    "startAuction(address,address,address)": FunctionFragment;
    "stringToBytes32(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "usb()": FunctionFragment;
    "usbJoin()": FunctionFragment;
    "usbPrice(address)": FunctionFragment;
    "vat()": FunctionFragment;
    "wards(address)": FunctionFragment;
    "willBorrow(address,address,int256)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "availableToBorrow"
      | "borrow"
      | "borrowApr"
      | "borrowed"
      | "buyFromAuction"
      | "collateralPrice"
      | "collateralRate"
      | "collateralTVL"
      | "currentLiquidationPrice"
      | "deny"
      | "deposit"
      | "depositTVL"
      | "discs"
      | "dog"
      | "drip"
      | "enableCollateralType"
      | "estimatedLiquidationPrice"
      | "free"
      | "getAllActiveAuctionsForToken"
      | "getTotalAuctionsCountForToken"
      | "getUsersInDebt"
      | "helioRewards"
      | "initialize"
      | "jug"
      | "locked"
      | "owner"
      | "payback"
      | "proxiableUUID"
      | "rely"
      | "removeCollateralType"
      | "renounceOwnership"
      | "setCollateralDisc"
      | "setCollateralType"
      | "setCores"
      | "setRewards"
      | "setUSBApprove"
      | "spotter"
      | "startAuction"
      | "stringToBytes32"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "usb"
      | "usbJoin"
      | "usbPrice"
      | "vat"
      | "wards"
      | "willBorrow"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "availableToBorrow",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "borrowApr", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrowed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFromAuction",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralTVL",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentLiquidationPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "depositTVL", values: [string]): string;
  encodeFunctionData(functionFragment: "discs", values: [string]): string;
  encodeFunctionData(functionFragment: "dog", values?: undefined): string;
  encodeFunctionData(functionFragment: "drip", values: [string]): string;
  encodeFunctionData(
    functionFragment: "enableCollateralType",
    values: [string, string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedLiquidationPrice",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "free",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllActiveAuctionsForToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAuctionsCountForToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsersInDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "helioRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "jug", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payback",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeCollateralType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralDisc",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralType",
    values: [string, string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCores",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "setRewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setUSBApprove",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "spotter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startAuction",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stringToBytes32",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "usb", values?: undefined): string;
  encodeFunctionData(functionFragment: "usbJoin", values?: undefined): string;
  encodeFunctionData(functionFragment: "usbPrice", values: [string]): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "willBorrow",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableToBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowApr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyFromAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTVL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositTVL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "discs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dog", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedLiquidationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "free", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllActiveAuctionsForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAuctionsCountForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsersInDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "helioRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jug", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralDisc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCores", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUSBApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spotter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringToBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usbJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usbPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "willBorrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Borrow(address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Payback(address,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface BorrowEventObject {
  user: string;
  amount: BigNumber;
}
export type BorrowEvent = TypedEvent<[string, BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface DepositEventObject {
  user: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PaybackEventObject {
  user: string;
  amount: BigNumber;
}
export type PaybackEvent = TypedEvent<[string, BigNumber], PaybackEventObject>;

export type PaybackEventFilter = TypedEventFilter<PaybackEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface DAOInteraction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOInteractionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    availableToBorrow(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrow(
      participant: string,
      token: string,
      usbAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowApr(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowed(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyFromAuction(
      token: string,
      auctionId: BigNumberish,
      collateralAmount: BigNumberish,
      maxPrice: BigNumberish,
      receiverAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralRate(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralTVL(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentLiquidationPrice(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      participant: string,
      token: string,
      dink: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositTVL(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    discs(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    dog(overrides?: CallOverrides): Promise<[string]>;

    drip(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableCollateralType(
      token: string,
      gemJoin: string,
      ilk: BytesLike,
      clip: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    estimatedLiquidationPrice(
      token: string,
      usr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    free(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllActiveAuctionsForToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<[SaleStructOutput[]] & { sales: SaleStructOutput[] }>;

    getTotalAuctionsCountForToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUsersInDebt(overrides?: CallOverrides): Promise<[string[]]>;

    helioRewards(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      vat_: string,
      spot_: string,
      usb_: string,
      usbJoin_: string,
      jug_: string,
      dog_: string,
      rewards_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    jug(overrides?: CallOverrides): Promise<[string]>;

    locked(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payback(
      participant: string,
      token: string,
      usbAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeCollateralType(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralDisc(
      token: string,
      disc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCollateralType(
      token: string,
      gemJoin: string,
      ilk: BytesLike,
      clip: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCores(
      vat_: string,
      spot_: string,
      usbJoin_: string,
      jug_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewards(
      rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUSBApprove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spotter(overrides?: CallOverrides): Promise<[string]>;

    startAuction(
      token: string,
      user: string,
      keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stringToBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usb(overrides?: CallOverrides): Promise<[string]>;

    usbJoin(overrides?: CallOverrides): Promise<[string]>;

    usbPrice(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    vat(overrides?: CallOverrides): Promise<[string]>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    willBorrow(
      token: string,
      usr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      participant: string,
      token: string,
      dink: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  availableToBorrow(
    token: string,
    usr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrow(
    participant: string,
    token: string,
    usbAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowApr(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowed(
    token: string,
    usr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyFromAuction(
    token: string,
    auctionId: BigNumberish,
    collateralAmount: BigNumberish,
    maxPrice: BigNumberish,
    receiverAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  collateralRate(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  collateralTVL(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  currentLiquidationPrice(
    token: string,
    usr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    participant: string,
    token: string,
    dink: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositTVL(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  discs(arg0: string, overrides?: CallOverrides): Promise<string>;

  dog(overrides?: CallOverrides): Promise<string>;

  drip(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableCollateralType(
    token: string,
    gemJoin: string,
    ilk: BytesLike,
    clip: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  estimatedLiquidationPrice(
    token: string,
    usr: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  free(
    token: string,
    usr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllActiveAuctionsForToken(
    token: string,
    overrides?: CallOverrides
  ): Promise<SaleStructOutput[]>;

  getTotalAuctionsCountForToken(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUsersInDebt(overrides?: CallOverrides): Promise<string[]>;

  helioRewards(overrides?: CallOverrides): Promise<string>;

  initialize(
    vat_: string,
    spot_: string,
    usb_: string,
    usbJoin_: string,
    jug_: string,
    dog_: string,
    rewards_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  jug(overrides?: CallOverrides): Promise<string>;

  locked(
    token: string,
    usr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  payback(
    participant: string,
    token: string,
    usbAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeCollateralType(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralDisc(
    token: string,
    disc: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCollateralType(
    token: string,
    gemJoin: string,
    ilk: BytesLike,
    clip: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCores(
    vat_: string,
    spot_: string,
    usbJoin_: string,
    jug_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewards(
    rewards: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUSBApprove(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spotter(overrides?: CallOverrides): Promise<string>;

  startAuction(
    token: string,
    user: string,
    keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stringToBytes32(source: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usb(overrides?: CallOverrides): Promise<string>;

  usbJoin(overrides?: CallOverrides): Promise<string>;

  usbPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  vat(overrides?: CallOverrides): Promise<string>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  willBorrow(
    token: string,
    usr: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    participant: string,
    token: string,
    dink: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    availableToBorrow(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      participant: string,
      token: string,
      usbAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowApr(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowed(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFromAuction(
      token: string,
      auctionId: BigNumberish,
      collateralAmount: BigNumberish,
      maxPrice: BigNumberish,
      receiverAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    collateralPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralRate(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralTVL(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentLiquidationPrice(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    deposit(
      participant: string,
      token: string,
      dink: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositTVL(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    discs(arg0: string, overrides?: CallOverrides): Promise<string>;

    dog(overrides?: CallOverrides): Promise<string>;

    drip(token: string, overrides?: CallOverrides): Promise<void>;

    enableCollateralType(
      token: string,
      gemJoin: string,
      ilk: BytesLike,
      clip: string,
      overrides?: CallOverrides
    ): Promise<void>;

    estimatedLiquidationPrice(
      token: string,
      usr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    free(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllActiveAuctionsForToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<SaleStructOutput[]>;

    getTotalAuctionsCountForToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsersInDebt(overrides?: CallOverrides): Promise<string[]>;

    helioRewards(overrides?: CallOverrides): Promise<string>;

    initialize(
      vat_: string,
      spot_: string,
      usb_: string,
      usbJoin_: string,
      jug_: string,
      dog_: string,
      rewards_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    jug(overrides?: CallOverrides): Promise<string>;

    locked(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    payback(
      participant: string,
      token: string,
      usbAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    removeCollateralType(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCollateralDisc(
      token: string,
      disc: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralType(
      token: string,
      gemJoin: string,
      ilk: BytesLike,
      clip: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCores(
      vat_: string,
      spot_: string,
      usbJoin_: string,
      jug_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewards(rewards: string, overrides?: CallOverrides): Promise<void>;

    setUSBApprove(overrides?: CallOverrides): Promise<void>;

    spotter(overrides?: CallOverrides): Promise<string>;

    startAuction(
      token: string,
      user: string,
      keeper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stringToBytes32(source: string, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    usb(overrides?: CallOverrides): Promise<string>;

    usbJoin(overrides?: CallOverrides): Promise<string>;

    usbPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<string>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    willBorrow(
      token: string,
      usr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      participant: string,
      token: string,
      dink: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Borrow(address,uint256)"(
      user?: string | null,
      amount?: null
    ): BorrowEventFilter;
    Borrow(user?: string | null, amount?: null): BorrowEventFilter;

    "Deposit(address,uint256)"(
      user?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(user?: string | null, amount?: null): DepositEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Payback(address,uint256)"(
      user?: string | null,
      amount?: null
    ): PaybackEventFilter;
    Payback(user?: string | null, amount?: null): PaybackEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "Withdraw(address,uint256)"(
      user?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(user?: string | null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    availableToBorrow(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      participant: string,
      token: string,
      usbAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowApr(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowed(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFromAuction(
      token: string,
      auctionId: BigNumberish,
      collateralAmount: BigNumberish,
      maxPrice: BigNumberish,
      receiverAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralRate(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralTVL(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentLiquidationPrice(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      participant: string,
      token: string,
      dink: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositTVL(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    discs(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    dog(overrides?: CallOverrides): Promise<BigNumber>;

    drip(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableCollateralType(
      token: string,
      gemJoin: string,
      ilk: BytesLike,
      clip: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    estimatedLiquidationPrice(
      token: string,
      usr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    free(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllActiveAuctionsForToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAuctionsCountForToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsersInDebt(overrides?: CallOverrides): Promise<BigNumber>;

    helioRewards(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      vat_: string,
      spot_: string,
      usb_: string,
      usbJoin_: string,
      jug_: string,
      dog_: string,
      rewards_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    jug(overrides?: CallOverrides): Promise<BigNumber>;

    locked(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payback(
      participant: string,
      token: string,
      usbAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeCollateralType(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralDisc(
      token: string,
      disc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCollateralType(
      token: string,
      gemJoin: string,
      ilk: BytesLike,
      clip: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCores(
      vat_: string,
      spot_: string,
      usbJoin_: string,
      jug_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewards(
      rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUSBApprove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spotter(overrides?: CallOverrides): Promise<BigNumber>;

    startAuction(
      token: string,
      user: string,
      keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stringToBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usb(overrides?: CallOverrides): Promise<BigNumber>;

    usbJoin(overrides?: CallOverrides): Promise<BigNumber>;

    usbPrice(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    willBorrow(
      token: string,
      usr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      participant: string,
      token: string,
      dink: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availableToBorrow(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      participant: string,
      token: string,
      usbAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowApr(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowed(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyFromAuction(
      token: string,
      auctionId: BigNumberish,
      collateralAmount: BigNumberish,
      maxPrice: BigNumberish,
      receiverAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralRate(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralTVL(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentLiquidationPrice(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      participant: string,
      token: string,
      dink: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositTVL(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    discs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dog(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    drip(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableCollateralType(
      token: string,
      gemJoin: string,
      ilk: BytesLike,
      clip: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    estimatedLiquidationPrice(
      token: string,
      usr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    free(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllActiveAuctionsForToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAuctionsCountForToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsersInDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    helioRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      vat_: string,
      spot_: string,
      usb_: string,
      usbJoin_: string,
      jug_: string,
      dog_: string,
      rewards_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    jug(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    locked(
      token: string,
      usr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payback(
      participant: string,
      token: string,
      usbAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeCollateralType(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralDisc(
      token: string,
      disc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralType(
      token: string,
      gemJoin: string,
      ilk: BytesLike,
      clip: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCores(
      vat_: string,
      spot_: string,
      usbJoin_: string,
      jug_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewards(
      rewards: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUSBApprove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spotter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startAuction(
      token: string,
      user: string,
      keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stringToBytes32(
      source: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usbJoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usbPrice(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    willBorrow(
      token: string,
      usr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      participant: string,
      token: string,
      dink: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
