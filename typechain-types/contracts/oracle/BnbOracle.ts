/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface BnbOracleInterface extends utils.Interface {
  functions: {
    "changePriceToken(address)": FunctionFragment;
    "peek()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "changePriceToken" | "peek"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changePriceToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "peek", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "changePriceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "peek", data: BytesLike): Result;

  events: {
    "PriceTokenChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PriceTokenChanged"): EventFragment;
}

export interface PriceTokenChangedEventObject {
  token: string;
}
export type PriceTokenChangedEvent = TypedEvent<
  [string],
  PriceTokenChangedEventObject
>;

export type PriceTokenChangedEventFilter =
  TypedEventFilter<PriceTokenChangedEvent>;

export interface BnbOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BnbOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changePriceToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    peek(overrides?: CallOverrides): Promise<[string, boolean]>;
  };

  changePriceToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  peek(overrides?: CallOverrides): Promise<[string, boolean]>;

  callStatic: {
    changePriceToken(token: string, overrides?: CallOverrides): Promise<void>;

    peek(overrides?: CallOverrides): Promise<[string, boolean]>;
  };

  filters: {
    "PriceTokenChanged(address)"(token?: null): PriceTokenChangedEventFilter;
    PriceTokenChanged(token?: null): PriceTokenChangedEventFilter;
  };

  estimateGas: {
    changePriceToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    peek(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changePriceToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    peek(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
