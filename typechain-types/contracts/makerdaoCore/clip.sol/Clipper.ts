/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface ClipperInterface extends utils.Interface {
  functions: {
    "active(uint256)": FunctionFragment;
    "buf()": FunctionFragment;
    "calc()": FunctionFragment;
    "chip()": FunctionFragment;
    "chost()": FunctionFragment;
    "count()": FunctionFragment;
    "cusp()": FunctionFragment;
    "deny(address)": FunctionFragment;
    "dog()": FunctionFragment;
    "file(bytes32,uint256)": FunctionFragment;
    "file(bytes32,address)": FunctionFragment;
    "getStatus(uint256)": FunctionFragment;
    "ilk()": FunctionFragment;
    "kick(uint256,uint256,address,address)": FunctionFragment;
    "kicks()": FunctionFragment;
    "list()": FunctionFragment;
    "redo(uint256,address)": FunctionFragment;
    "rely(address)": FunctionFragment;
    "sales(uint256)": FunctionFragment;
    "spotter()": FunctionFragment;
    "stopped()": FunctionFragment;
    "tail()": FunctionFragment;
    "take(uint256,uint256,uint256,address,bytes)": FunctionFragment;
    "tip()": FunctionFragment;
    "upchost()": FunctionFragment;
    "vat()": FunctionFragment;
    "vow()": FunctionFragment;
    "wards(address)": FunctionFragment;
    "yank(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "active"
      | "buf"
      | "calc"
      | "chip"
      | "chost"
      | "count"
      | "cusp"
      | "deny"
      | "dog"
      | "file(bytes32,uint256)"
      | "file(bytes32,address)"
      | "getStatus"
      | "ilk"
      | "kick"
      | "kicks"
      | "list"
      | "redo"
      | "rely"
      | "sales"
      | "spotter"
      | "stopped"
      | "tail"
      | "take"
      | "tip"
      | "upchost"
      | "vat"
      | "vow"
      | "wards"
      | "yank"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "active",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buf", values?: undefined): string;
  encodeFunctionData(functionFragment: "calc", values?: undefined): string;
  encodeFunctionData(functionFragment: "chip", values?: undefined): string;
  encodeFunctionData(functionFragment: "chost", values?: undefined): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(functionFragment: "cusp", values?: undefined): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(functionFragment: "dog", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "file(bytes32,uint256)",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "file(bytes32,address)",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ilk", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "kick",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "kicks", values?: undefined): string;
  encodeFunctionData(functionFragment: "list", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(functionFragment: "sales", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "spotter", values?: undefined): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(functionFragment: "tail", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "take",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "tip", values?: undefined): string;
  encodeFunctionData(functionFragment: "upchost", values?: undefined): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "vow", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;
  encodeFunctionData(functionFragment: "yank", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cusp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dog", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "file(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "file(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kicks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sales", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spotter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tail", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upchost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yank", data: BytesLike): Result;

  events: {
    "Deny(address)": EventFragment;
    "File(bytes32,uint256)": EventFragment;
    "File(bytes32,address)": EventFragment;
    "Kick(uint256,uint256,uint256,uint256,address,address,uint256)": EventFragment;
    "Redo(uint256,uint256,uint256,uint256,address,address,uint256)": EventFragment;
    "Rely(address)": EventFragment;
    "Take(uint256,uint256,uint256,uint256,uint256,uint256,address)": EventFragment;
    "Yank(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deny"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "File(bytes32,uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "File(bytes32,address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Kick"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rely"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Take"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Yank"): EventFragment;
}

export interface DenyEventObject {
  usr: string;
}
export type DenyEvent = TypedEvent<[string], DenyEventObject>;

export type DenyEventFilter = TypedEventFilter<DenyEvent>;

export interface File_bytes32_uint256_EventObject {
  what: string;
  data: BigNumber;
}
export type File_bytes32_uint256_Event = TypedEvent<
  [string, BigNumber],
  File_bytes32_uint256_EventObject
>;

export type File_bytes32_uint256_EventFilter =
  TypedEventFilter<File_bytes32_uint256_Event>;

export interface File_bytes32_address_EventObject {
  what: string;
  data: string;
}
export type File_bytes32_address_Event = TypedEvent<
  [string, string],
  File_bytes32_address_EventObject
>;

export type File_bytes32_address_EventFilter =
  TypedEventFilter<File_bytes32_address_Event>;

export interface KickEventObject {
  id: BigNumber;
  top: BigNumber;
  tab: BigNumber;
  lot: BigNumber;
  usr: string;
  kpr: string;
  coin: BigNumber;
}
export type KickEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, string, BigNumber],
  KickEventObject
>;

export type KickEventFilter = TypedEventFilter<KickEvent>;

export interface RedoEventObject {
  id: BigNumber;
  top: BigNumber;
  tab: BigNumber;
  lot: BigNumber;
  usr: string;
  kpr: string;
  coin: BigNumber;
}
export type RedoEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string, string, BigNumber],
  RedoEventObject
>;

export type RedoEventFilter = TypedEventFilter<RedoEvent>;

export interface RelyEventObject {
  usr: string;
}
export type RelyEvent = TypedEvent<[string], RelyEventObject>;

export type RelyEventFilter = TypedEventFilter<RelyEvent>;

export interface TakeEventObject {
  id: BigNumber;
  max: BigNumber;
  price: BigNumber;
  owe: BigNumber;
  tab: BigNumber;
  lot: BigNumber;
  usr: string;
}
export type TakeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string],
  TakeEventObject
>;

export type TakeEventFilter = TypedEventFilter<TakeEvent>;

export interface YankEventObject {
  id: BigNumber;
}
export type YankEvent = TypedEvent<[BigNumber], YankEventObject>;

export type YankEventFilter = TypedEventFilter<YankEvent>;

export interface Clipper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClipperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    active(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    buf(overrides?: CallOverrides): Promise<[BigNumber]>;

    calc(overrides?: CallOverrides): Promise<[string]>;

    chip(overrides?: CallOverrides): Promise<[BigNumber]>;

    chost(overrides?: CallOverrides): Promise<[BigNumber]>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    cusp(overrides?: CallOverrides): Promise<[BigNumber]>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dog(overrides?: CallOverrides): Promise<[string]>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        needsRedo: boolean;
        price: BigNumber;
        lot: BigNumber;
        tab: BigNumber;
      }
    >;

    ilk(overrides?: CallOverrides): Promise<[string]>;

    kick(
      tab: BigNumberish,
      lot: BigNumberish,
      usr: string,
      kpr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kicks(overrides?: CallOverrides): Promise<[BigNumber]>;

    list(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    redo(
      id: BigNumberish,
      kpr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sales(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        pos: BigNumber;
        tab: BigNumber;
        lot: BigNumber;
        usr: string;
        tic: BigNumber;
        top: BigNumber;
      }
    >;

    spotter(overrides?: CallOverrides): Promise<[string]>;

    stopped(overrides?: CallOverrides): Promise<[BigNumber]>;

    tail(overrides?: CallOverrides): Promise<[BigNumber]>;

    take(
      id: BigNumberish,
      amt: BigNumberish,
      max: BigNumberish,
      who: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tip(overrides?: CallOverrides): Promise<[BigNumber]>;

    upchost(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vat(overrides?: CallOverrides): Promise<[string]>;

    vow(overrides?: CallOverrides): Promise<[string]>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    yank(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  active(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  buf(overrides?: CallOverrides): Promise<BigNumber>;

  calc(overrides?: CallOverrides): Promise<string>;

  chip(overrides?: CallOverrides): Promise<BigNumber>;

  chost(overrides?: CallOverrides): Promise<BigNumber>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  cusp(overrides?: CallOverrides): Promise<BigNumber>;

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dog(overrides?: CallOverrides): Promise<string>;

  "file(bytes32,uint256)"(
    what: BytesLike,
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,address)"(
    what: BytesLike,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStatus(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber] & {
      needsRedo: boolean;
      price: BigNumber;
      lot: BigNumber;
      tab: BigNumber;
    }
  >;

  ilk(overrides?: CallOverrides): Promise<string>;

  kick(
    tab: BigNumberish,
    lot: BigNumberish,
    usr: string,
    kpr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kicks(overrides?: CallOverrides): Promise<BigNumber>;

  list(overrides?: CallOverrides): Promise<BigNumber[]>;

  redo(
    id: BigNumberish,
    kpr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sales(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
      pos: BigNumber;
      tab: BigNumber;
      lot: BigNumber;
      usr: string;
      tic: BigNumber;
      top: BigNumber;
    }
  >;

  spotter(overrides?: CallOverrides): Promise<string>;

  stopped(overrides?: CallOverrides): Promise<BigNumber>;

  tail(overrides?: CallOverrides): Promise<BigNumber>;

  take(
    id: BigNumberish,
    amt: BigNumberish,
    max: BigNumberish,
    who: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tip(overrides?: CallOverrides): Promise<BigNumber>;

  upchost(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vat(overrides?: CallOverrides): Promise<string>;

  vow(overrides?: CallOverrides): Promise<string>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  yank(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    active(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buf(overrides?: CallOverrides): Promise<BigNumber>;

    calc(overrides?: CallOverrides): Promise<string>;

    chip(overrides?: CallOverrides): Promise<BigNumber>;

    chost(overrides?: CallOverrides): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    cusp(overrides?: CallOverrides): Promise<BigNumber>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    dog(overrides?: CallOverrides): Promise<string>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber] & {
        needsRedo: boolean;
        price: BigNumber;
        lot: BigNumber;
        tab: BigNumber;
      }
    >;

    ilk(overrides?: CallOverrides): Promise<string>;

    kick(
      tab: BigNumberish,
      lot: BigNumberish,
      usr: string,
      kpr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kicks(overrides?: CallOverrides): Promise<BigNumber>;

    list(overrides?: CallOverrides): Promise<BigNumber[]>;

    redo(
      id: BigNumberish,
      kpr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    sales(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber, BigNumber] & {
        pos: BigNumber;
        tab: BigNumber;
        lot: BigNumber;
        usr: string;
        tic: BigNumber;
        top: BigNumber;
      }
    >;

    spotter(overrides?: CallOverrides): Promise<string>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    tail(overrides?: CallOverrides): Promise<BigNumber>;

    take(
      id: BigNumberish,
      amt: BigNumberish,
      max: BigNumberish,
      who: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    tip(overrides?: CallOverrides): Promise<BigNumber>;

    upchost(overrides?: CallOverrides): Promise<void>;

    vat(overrides?: CallOverrides): Promise<string>;

    vow(overrides?: CallOverrides): Promise<string>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    yank(id: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deny(address)"(usr?: string | null): DenyEventFilter;
    Deny(usr?: string | null): DenyEventFilter;

    "File(bytes32,uint256)"(
      what?: BytesLike | null,
      data?: null
    ): File_bytes32_uint256_EventFilter;
    "File(bytes32,address)"(
      what?: BytesLike | null,
      data?: null
    ): File_bytes32_address_EventFilter;

    "Kick(uint256,uint256,uint256,uint256,address,address,uint256)"(
      id?: BigNumberish | null,
      top?: null,
      tab?: null,
      lot?: null,
      usr?: string | null,
      kpr?: string | null,
      coin?: null
    ): KickEventFilter;
    Kick(
      id?: BigNumberish | null,
      top?: null,
      tab?: null,
      lot?: null,
      usr?: string | null,
      kpr?: string | null,
      coin?: null
    ): KickEventFilter;

    "Redo(uint256,uint256,uint256,uint256,address,address,uint256)"(
      id?: BigNumberish | null,
      top?: null,
      tab?: null,
      lot?: null,
      usr?: string | null,
      kpr?: string | null,
      coin?: null
    ): RedoEventFilter;
    Redo(
      id?: BigNumberish | null,
      top?: null,
      tab?: null,
      lot?: null,
      usr?: string | null,
      kpr?: string | null,
      coin?: null
    ): RedoEventFilter;

    "Rely(address)"(usr?: string | null): RelyEventFilter;
    Rely(usr?: string | null): RelyEventFilter;

    "Take(uint256,uint256,uint256,uint256,uint256,uint256,address)"(
      id?: BigNumberish | null,
      max?: null,
      price?: null,
      owe?: null,
      tab?: null,
      lot?: null,
      usr?: string | null
    ): TakeEventFilter;
    Take(
      id?: BigNumberish | null,
      max?: null,
      price?: null,
      owe?: null,
      tab?: null,
      lot?: null,
      usr?: string | null
    ): TakeEventFilter;

    "Yank(uint256)"(id?: null): YankEventFilter;
    Yank(id?: null): YankEventFilter;
  };

  estimateGas: {
    active(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buf(overrides?: CallOverrides): Promise<BigNumber>;

    calc(overrides?: CallOverrides): Promise<BigNumber>;

    chip(overrides?: CallOverrides): Promise<BigNumber>;

    chost(overrides?: CallOverrides): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    cusp(overrides?: CallOverrides): Promise<BigNumber>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dog(overrides?: CallOverrides): Promise<BigNumber>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStatus(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ilk(overrides?: CallOverrides): Promise<BigNumber>;

    kick(
      tab: BigNumberish,
      lot: BigNumberish,
      usr: string,
      kpr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kicks(overrides?: CallOverrides): Promise<BigNumber>;

    list(overrides?: CallOverrides): Promise<BigNumber>;

    redo(
      id: BigNumberish,
      kpr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sales(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    spotter(overrides?: CallOverrides): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    tail(overrides?: CallOverrides): Promise<BigNumber>;

    take(
      id: BigNumberish,
      amt: BigNumberish,
      max: BigNumberish,
      who: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tip(overrides?: CallOverrides): Promise<BigNumber>;

    upchost(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<BigNumber>;

    vow(overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    yank(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    active(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chip(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cusp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dog(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ilk(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kick(
      tab: BigNumberish,
      lot: BigNumberish,
      usr: string,
      kpr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kicks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    list(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redo(
      id: BigNumberish,
      kpr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sales(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spotter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tail(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    take(
      id: BigNumberish,
      amt: BigNumberish,
      max: BigNumberish,
      who: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tip(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upchost(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yank(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
