/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface DogInterface extends utils.Interface {
  functions: {
    "Dirt()": FunctionFragment;
    "Hole()": FunctionFragment;
    "bark(bytes32,address,address)": FunctionFragment;
    "cage()": FunctionFragment;
    "chop(bytes32)": FunctionFragment;
    "deny(address)": FunctionFragment;
    "digs(bytes32,uint256)": FunctionFragment;
    "file(bytes32,bytes32,uint256)": FunctionFragment;
    "file(bytes32,uint256)": FunctionFragment;
    "file(bytes32,address)": FunctionFragment;
    "file(bytes32,bytes32,address)": FunctionFragment;
    "ilks(bytes32)": FunctionFragment;
    "live()": FunctionFragment;
    "rely(address)": FunctionFragment;
    "vat()": FunctionFragment;
    "vow()": FunctionFragment;
    "wards(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Dirt"
      | "Hole"
      | "bark"
      | "cage"
      | "chop"
      | "deny"
      | "digs"
      | "file(bytes32,bytes32,uint256)"
      | "file(bytes32,uint256)"
      | "file(bytes32,address)"
      | "file(bytes32,bytes32,address)"
      | "ilks"
      | "live"
      | "rely"
      | "vat"
      | "vow"
      | "wards"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Dirt", values?: undefined): string;
  encodeFunctionData(functionFragment: "Hole", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bark",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(functionFragment: "cage", values?: undefined): string;
  encodeFunctionData(functionFragment: "chop", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "deny", values: [string]): string;
  encodeFunctionData(
    functionFragment: "digs",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "file(bytes32,bytes32,uint256)",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "file(bytes32,uint256)",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "file(bytes32,address)",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "file(bytes32,bytes32,address)",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "ilks", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "live", values?: undefined): string;
  encodeFunctionData(functionFragment: "rely", values: [string]): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;
  encodeFunctionData(functionFragment: "vow", values?: undefined): string;
  encodeFunctionData(functionFragment: "wards", values: [string]): string;

  decodeFunctionResult(functionFragment: "Dirt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Hole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bark", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "digs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "file(bytes32,bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "file(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "file(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "file(bytes32,bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ilks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "live", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rely", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wards", data: BytesLike): Result;

  events: {
    "Bark(bytes32,address,uint256,uint256,uint256,address,uint256)": EventFragment;
    "Cage()": EventFragment;
    "Deny(address)": EventFragment;
    "Digs(bytes32,uint256)": EventFragment;
    "File(bytes32,uint256)": EventFragment;
    "File(bytes32,address)": EventFragment;
    "File(bytes32,bytes32,uint256)": EventFragment;
    "File(bytes32,bytes32,address)": EventFragment;
    "Rely(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bark"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deny"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Digs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "File(bytes32,uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "File(bytes32,address)"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "File(bytes32,bytes32,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "File(bytes32,bytes32,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rely"): EventFragment;
}

export interface BarkEventObject {
  ilk: string;
  urn: string;
  ink: BigNumber;
  art: BigNumber;
  due: BigNumber;
  clip: string;
  id: BigNumber;
}
export type BarkEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string, BigNumber],
  BarkEventObject
>;

export type BarkEventFilter = TypedEventFilter<BarkEvent>;

export interface CageEventObject {}
export type CageEvent = TypedEvent<[], CageEventObject>;

export type CageEventFilter = TypedEventFilter<CageEvent>;

export interface DenyEventObject {
  usr: string;
}
export type DenyEvent = TypedEvent<[string], DenyEventObject>;

export type DenyEventFilter = TypedEventFilter<DenyEvent>;

export interface DigsEventObject {
  ilk: string;
  rad: BigNumber;
}
export type DigsEvent = TypedEvent<[string, BigNumber], DigsEventObject>;

export type DigsEventFilter = TypedEventFilter<DigsEvent>;

export interface File_bytes32_uint256_EventObject {
  what: string;
  data: BigNumber;
}
export type File_bytes32_uint256_Event = TypedEvent<
  [string, BigNumber],
  File_bytes32_uint256_EventObject
>;

export type File_bytes32_uint256_EventFilter =
  TypedEventFilter<File_bytes32_uint256_Event>;

export interface File_bytes32_address_EventObject {
  what: string;
  data: string;
}
export type File_bytes32_address_Event = TypedEvent<
  [string, string],
  File_bytes32_address_EventObject
>;

export type File_bytes32_address_EventFilter =
  TypedEventFilter<File_bytes32_address_Event>;

export interface File_bytes32_bytes32_uint256_EventObject {
  ilk: string;
  what: string;
  data: BigNumber;
}
export type File_bytes32_bytes32_uint256_Event = TypedEvent<
  [string, string, BigNumber],
  File_bytes32_bytes32_uint256_EventObject
>;

export type File_bytes32_bytes32_uint256_EventFilter =
  TypedEventFilter<File_bytes32_bytes32_uint256_Event>;

export interface File_bytes32_bytes32_address_EventObject {
  ilk: string;
  what: string;
  clip: string;
}
export type File_bytes32_bytes32_address_Event = TypedEvent<
  [string, string, string],
  File_bytes32_bytes32_address_EventObject
>;

export type File_bytes32_bytes32_address_EventFilter =
  TypedEventFilter<File_bytes32_bytes32_address_Event>;

export interface RelyEventObject {
  usr: string;
}
export type RelyEvent = TypedEvent<[string], RelyEventObject>;

export type RelyEventFilter = TypedEventFilter<RelyEvent>;

export interface Dog extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DogInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Dirt(overrides?: CallOverrides): Promise<[BigNumber]>;

    Hole(overrides?: CallOverrides): Promise<[BigNumber]>;

    bark(
      ilk: BytesLike,
      urn: string,
      kpr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chop(ilk: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    digs(
      ilk: BytesLike,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,bytes32,uint256)"(
      ilk: BytesLike,
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "file(bytes32,bytes32,address)"(
      ilk: BytesLike,
      what: BytesLike,
      clip: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ilks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        clip: string;
        chop: BigNumber;
        hole: BigNumber;
        dirt: BigNumber;
      }
    >;

    live(overrides?: CallOverrides): Promise<[BigNumber]>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vat(overrides?: CallOverrides): Promise<[string]>;

    vow(overrides?: CallOverrides): Promise<[string]>;

    wards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  Dirt(overrides?: CallOverrides): Promise<BigNumber>;

  Hole(overrides?: CallOverrides): Promise<BigNumber>;

  bark(
    ilk: BytesLike,
    urn: string,
    kpr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cage(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chop(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  deny(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  digs(
    ilk: BytesLike,
    rad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,bytes32,uint256)"(
    ilk: BytesLike,
    what: BytesLike,
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,uint256)"(
    what: BytesLike,
    data: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,address)"(
    what: BytesLike,
    data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "file(bytes32,bytes32,address)"(
    ilk: BytesLike,
    what: BytesLike,
    clip: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ilks(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      clip: string;
      chop: BigNumber;
      hole: BigNumber;
      dirt: BigNumber;
    }
  >;

  live(overrides?: CallOverrides): Promise<BigNumber>;

  rely(
    usr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vat(overrides?: CallOverrides): Promise<string>;

  vow(overrides?: CallOverrides): Promise<string>;

  wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    Dirt(overrides?: CallOverrides): Promise<BigNumber>;

    Hole(overrides?: CallOverrides): Promise<BigNumber>;

    bark(
      ilk: BytesLike,
      urn: string,
      kpr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cage(overrides?: CallOverrides): Promise<void>;

    chop(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    deny(usr: string, overrides?: CallOverrides): Promise<void>;

    digs(
      ilk: BytesLike,
      rad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,bytes32,uint256)"(
      ilk: BytesLike,
      what: BytesLike,
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "file(bytes32,bytes32,address)"(
      ilk: BytesLike,
      what: BytesLike,
      clip: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ilks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        clip: string;
        chop: BigNumber;
        hole: BigNumber;
        dirt: BigNumber;
      }
    >;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    rely(usr: string, overrides?: CallOverrides): Promise<void>;

    vat(overrides?: CallOverrides): Promise<string>;

    vow(overrides?: CallOverrides): Promise<string>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Bark(bytes32,address,uint256,uint256,uint256,address,uint256)"(
      ilk?: BytesLike | null,
      urn?: string | null,
      ink?: null,
      art?: null,
      due?: null,
      clip?: null,
      id?: BigNumberish | null
    ): BarkEventFilter;
    Bark(
      ilk?: BytesLike | null,
      urn?: string | null,
      ink?: null,
      art?: null,
      due?: null,
      clip?: null,
      id?: BigNumberish | null
    ): BarkEventFilter;

    "Cage()"(): CageEventFilter;
    Cage(): CageEventFilter;

    "Deny(address)"(usr?: string | null): DenyEventFilter;
    Deny(usr?: string | null): DenyEventFilter;

    "Digs(bytes32,uint256)"(
      ilk?: BytesLike | null,
      rad?: null
    ): DigsEventFilter;
    Digs(ilk?: BytesLike | null, rad?: null): DigsEventFilter;

    "File(bytes32,uint256)"(
      what?: BytesLike | null,
      data?: null
    ): File_bytes32_uint256_EventFilter;
    "File(bytes32,address)"(
      what?: BytesLike | null,
      data?: null
    ): File_bytes32_address_EventFilter;
    "File(bytes32,bytes32,uint256)"(
      ilk?: BytesLike | null,
      what?: BytesLike | null,
      data?: null
    ): File_bytes32_bytes32_uint256_EventFilter;
    "File(bytes32,bytes32,address)"(
      ilk?: BytesLike | null,
      what?: BytesLike | null,
      clip?: null
    ): File_bytes32_bytes32_address_EventFilter;

    "Rely(address)"(usr?: string | null): RelyEventFilter;
    Rely(usr?: string | null): RelyEventFilter;
  };

  estimateGas: {
    Dirt(overrides?: CallOverrides): Promise<BigNumber>;

    Hole(overrides?: CallOverrides): Promise<BigNumber>;

    bark(
      ilk: BytesLike,
      urn: string,
      kpr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chop(ilk: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    digs(
      ilk: BytesLike,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,bytes32,uint256)"(
      ilk: BytesLike,
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "file(bytes32,bytes32,address)"(
      ilk: BytesLike,
      what: BytesLike,
      clip: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ilks(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    live(overrides?: CallOverrides): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<BigNumber>;

    vow(overrides?: CallOverrides): Promise<BigNumber>;

    wards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Dirt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Hole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bark(
      ilk: BytesLike,
      urn: string,
      kpr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chop(
      ilk: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deny(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    digs(
      ilk: BytesLike,
      rad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,bytes32,uint256)"(
      ilk: BytesLike,
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,uint256)"(
      what: BytesLike,
      data: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,address)"(
      what: BytesLike,
      data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "file(bytes32,bytes32,address)"(
      ilk: BytesLike,
      what: BytesLike,
      clip: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ilks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    live(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rely(
      usr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
