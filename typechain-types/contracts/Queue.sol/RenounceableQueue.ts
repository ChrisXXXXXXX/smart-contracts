/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface RenounceableQueueInterface extends utils.Interface {
  functions: {
    "addHead(address)": FunctionFragment;
    "find(address)": FunctionFragment;
    "get(uint256)": FunctionFragment;
    "head()": FunctionFragment;
    "next(uint256)": FunctionFragment;
    "objects(uint256)": FunctionFragment;
    "prev(uint256)": FunctionFragment;
    "remove(uint256)": FunctionFragment;
    "tail()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addHead"
      | "find"
      | "get"
      | "head"
      | "next"
      | "objects"
      | "prev"
      | "remove"
      | "tail"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addHead", values: [string]): string;
  encodeFunctionData(functionFragment: "find", values: [string]): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "head", values?: undefined): string;
  encodeFunctionData(functionFragment: "next", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "objects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "prev", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tail", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addHead", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "find", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "head", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "next", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "objects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tail", data: BytesLike): Result;

  events: {
    "NewHead(uint256)": EventFragment;
    "NewTail(uint256)": EventFragment;
    "ObjectCreated(uint256,address)": EventFragment;
    "ObjectRemoved(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewHead"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTail"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ObjectCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ObjectRemoved"): EventFragment;
}

export interface NewHeadEventObject {
  id: BigNumber;
}
export type NewHeadEvent = TypedEvent<[BigNumber], NewHeadEventObject>;

export type NewHeadEventFilter = TypedEventFilter<NewHeadEvent>;

export interface NewTailEventObject {
  id: BigNumber;
}
export type NewTailEvent = TypedEvent<[BigNumber], NewTailEventObject>;

export type NewTailEventFilter = TypedEventFilter<NewTailEvent>;

export interface ObjectCreatedEventObject {
  id: BigNumber;
  data: string;
}
export type ObjectCreatedEvent = TypedEvent<
  [BigNumber, string],
  ObjectCreatedEventObject
>;

export type ObjectCreatedEventFilter = TypedEventFilter<ObjectCreatedEvent>;

export interface ObjectRemovedEventObject {
  id: BigNumber;
}
export type ObjectRemovedEvent = TypedEvent<
  [BigNumber],
  ObjectRemovedEventObject
>;

export type ObjectRemovedEventFilter = TypedEventFilter<ObjectRemovedEvent>;

export interface RenounceableQueue extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RenounceableQueueInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addHead(
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    find(
      _data: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    get(_id: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    head(overrides?: CallOverrides): Promise<[BigNumber]>;

    next(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    objects(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    prev(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    remove(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tail(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addHead(
    _data: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  find(_data: string, overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

  get(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  head(overrides?: CallOverrides): Promise<BigNumber>;

  next(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  objects(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  prev(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  remove(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tail(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addHead(_data: string, overrides?: CallOverrides): Promise<void>;

    find(
      _data: string,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    get(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    head(overrides?: CallOverrides): Promise<BigNumber>;

    next(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    objects(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    prev(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    remove(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    tail(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "NewHead(uint256)"(id?: null): NewHeadEventFilter;
    NewHead(id?: null): NewHeadEventFilter;

    "NewTail(uint256)"(id?: null): NewTailEventFilter;
    NewTail(id?: null): NewTailEventFilter;

    "ObjectCreated(uint256,address)"(
      id?: null,
      data?: null
    ): ObjectCreatedEventFilter;
    ObjectCreated(id?: null, data?: null): ObjectCreatedEventFilter;

    "ObjectRemoved(uint256)"(id?: null): ObjectRemovedEventFilter;
    ObjectRemoved(id?: null): ObjectRemovedEventFilter;
  };

  estimateGas: {
    addHead(
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    find(_data: string, overrides?: CallOverrides): Promise<BigNumber>;

    get(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    head(overrides?: CallOverrides): Promise<BigNumber>;

    next(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    objects(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    prev(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tail(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addHead(
      _data: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    find(
      _data: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    head(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    next(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    objects(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prev(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tail(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
