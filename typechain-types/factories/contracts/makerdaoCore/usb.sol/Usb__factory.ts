/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Usb,
  UsbInterface,
} from "../../../../contracts/makerdaoCore/usb.sol/Usb";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId_",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "guy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guy",
        type: "address",
      },
    ],
    name: "deny",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "move",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "allowed",
        type: "bool",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "pull",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "push",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "guy",
        type: "address",
      },
    ],
    name: "rely",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "wards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001289380380620012898339810160408190526200003491620001fb565b336000908152602081815260409182902060019081905582518084018452600e81526d2ab9b11029ba30b13632b1b7b4b760911b9083015282518084018452908152603160f81b9082015281517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f918101919091527fd6e1fd1d1ea59d82606011154de0566287b40de66761b5c1ce85104d2eb1d608918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018390523060a082015260c00160408051601f19818403018152919052805160209182012060065581516200013691600191908401906200013f565b50505062000321565b8280546200014d90620002e5565b90600052602060002090601f016020900481019282620001715760008555620001bc565b82601f106200018c57805160ff1916838001178555620001bc565b82800160010185558215620001bc579182015b82811115620001bc5782518255916020019190600101906200019f565b50620001ca929150620001ce565b5090565b5b80821115620001ca5760008155600101620001cf565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200020f57600080fd5b8251602080850151919350906001600160401b03808211156200023157600080fd5b818601915086601f8301126200024657600080fd5b8151818111156200025b576200025b620001e5565b604051601f8201601f19908116603f01168101908382118183101715620002865762000286620001e5565b8160405282815289868487010111156200029f57600080fd5b600093505b82841015620002c35784840186015181850187015292850192620002a4565b82841115620002d55760008684830101525b8096505050505050509250929050565b600181811c90821680620002fa57607f821691505b6020821081036200031b57634e487b7160e01b600052602260045260246000fd5b50919050565b610f5880620003316000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80637ecebe00116100b8578063a9059cbb1161007c578063a9059cbb146102ea578063b753a98c146102fd578063bb35783b14610310578063bf353dbb14610323578063dd62ed3e14610343578063f2d5d56b1461036e57600080fd5b80637ecebe00146102895780638fcbaf0c146102a957806395d89b41146102bc5780639c52a7f1146102c45780639dc29fac146102d757600080fd5b8063313ce5671161010a578063313ce567146101fe5780633644e5151461021857806340c10f191461022157806354fd4d501461023657806365fae35e1461025657806370a082311461026957600080fd5b806306fdde0314610147578063095ea7b31461018a57806318160ddd146101ad57806323b872dd146101c457806330adf81f146101d7575b600080fd5b6101746040518060400160405280600e81526020016d2ab9b11029ba30b13632b1b7b4b760911b81525081565b6040516101819190610c5d565b60405180910390f35b61019d610198366004610cce565b610381565b6040519015158152602001610181565b6101b660025481565b604051908152602001610181565b61019d6101d2366004610cf8565b6103ee565b6101b67fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb81565b610206601281565b60405160ff9091168152602001610181565b6101b660065481565b61023461022f366004610cce565b6105ae565b005b610174604051806040016040528060018152602001603160f81b81525081565b610234610264366004610d34565b61065d565b6101b6610277366004610d34565b60036020526000908152604090205481565b6101b6610297366004610d34565b60056020526000908152604090205481565b6102346102b7366004610d4f565b6106a9565b61017461099d565b6102346102d2366004610d34565b610a2b565b6102346102e5366004610cce565b610a74565b61019d6102f8366004610cce565b610bfd565b61023461030b366004610cce565b610c11565b61023461031e366004610cf8565b610c21565b6101b6610331366004610d34565b60006020819052908152604090205481565b6101b6610351366004610dd9565b600460209081526000928352604080842090915290825290205481565b61023461037c366004610cce565b610c32565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103dc9086815260200190565b60405180910390a35060015b92915050565b6001600160a01b03831660009081526003602052604081205482111561042f5760405162461bcd60e51b815260040161042690610e0c565b60405180910390fd5b6001600160a01b038416331480159061046d57506001600160a01b038416600090815260046020908152604080832033845290915290205460001914155b15610508576001600160a01b03841660009081526004602090815260408083203384529091529020548211156104b55760405162461bcd60e51b815260040161042690610e3e565b6001600160a01b03841660009081526004602090815260408083203384529091529020546104e39083610c3d565b6001600160a01b03851660009081526004602090815260408083203384529091529020555b6001600160a01b03841660009081526003602052604090205461052b9083610c3d565b6001600160a01b03808616600090815260036020526040808220939093559085168152205461055a9083610c4d565b6001600160a01b038085166000818152600360205260409081902093909355915190861690600080516020610f038339815191529061059c9086815260200190565b60405180910390a35060019392505050565b336000908152602081905260409020546001146105dd5760405162461bcd60e51b815260040161042690610e75565b6001600160a01b0382166000908152600360205260409020546106009082610c4d565b6001600160a01b0383166000908152600360205260409020556002546106269082610c4d565b6002556040518181526001600160a01b03831690600090600080516020610f03833981519152906020015b60405180910390a35050565b3360009081526020819052604090205460011461068c5760405162461bcd60e51b815260040161042690610e75565b6001600160a01b0316600090815260208190526040902060019055565b600654604080517fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb60208201526001600160a01b03808c169282019290925290891660608201526080810188905260a0810187905285151560c08201526000919060e0016040516020818303038152906040528051906020012060405160200161074a92919061190160f01b81526002810192909252602282015260420190565b60408051601f19818403018152919052805160209091012090506001600160a01b0389166107b25760405162461bcd60e51b815260206004820152601560248201527405573622f696e76616c69642d616464726573732d3605c1b6044820152606401610426565b60408051600081526020810180835283905260ff861691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610805573d6000803e3d6000fd5b505050602060405103516001600160a01b0316896001600160a01b0316146108645760405162461bcd60e51b8152602060048201526012602482015271155cd88bda5b9d985b1a590b5c195c9b5a5d60721b6044820152606401610426565b8515806108715750854211155b6108b25760405162461bcd60e51b8152602060048201526012602482015271155cd88bdc195c9b5a5d0b595e1c1a5c995960721b6044820152606401610426565b6001600160a01b03891660009081526005602052604081208054916108d683610ea1565b91905055871461091c5760405162461bcd60e51b81526020600482015260116024820152705573622f696e76616c69642d6e6f6e636560781b6044820152606401610426565b60008561092a57600061092e565b6000195b6001600160a01b038b81166000818152600460209081526040808320948f16808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050505050565b600180546109aa90610ec8565b80601f01602080910402602001604051908101604052809291908181526020018280546109d690610ec8565b8015610a235780601f106109f857610100808354040283529160200191610a23565b820191906000526020600020905b815481529060010190602001808311610a0657829003601f168201915b505050505081565b33600090815260208190526040902054600114610a5a5760405162461bcd60e51b815260040161042690610e75565b6001600160a01b0316600090815260208190526040812055565b6001600160a01b038216600090815260036020526040902054811115610aac5760405162461bcd60e51b815260040161042690610e0c565b6001600160a01b0382163314801590610aea57506001600160a01b038216600090815260046020908152604080832033845290915290205460001914155b15610b85576001600160a01b0382166000908152600460209081526040808320338452909152902054811115610b325760405162461bcd60e51b815260040161042690610e3e565b6001600160a01b0382166000908152600460209081526040808320338452909152902054610b609082610c3d565b6001600160a01b03831660009081526004602090815260408083203384529091529020555b6001600160a01b038216600090815260036020526040902054610ba89082610c3d565b6001600160a01b038316600090815260036020526040902055600254610bce9082610c3d565b6002556040518181526000906001600160a01b03841690600080516020610f0383398151915290602001610651565b6000610c0a3384846103ee565b9392505050565b610c1c3383836103ee565b505050565b610c2c8383836103ee565b50505050565b610c1c8233836103ee565b808203828111156103e857600080fd5b808201828110156103e857600080fd5b600060208083528351808285015260005b81811015610c8a57858101830151858201604001528201610c6e565b81811115610c9c576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610cc957600080fd5b919050565b60008060408385031215610ce157600080fd5b610cea83610cb2565b946020939093013593505050565b600080600060608486031215610d0d57600080fd5b610d1684610cb2565b9250610d2460208501610cb2565b9150604084013590509250925092565b600060208284031215610d4657600080fd5b610c0a82610cb2565b600080600080600080600080610100898b031215610d6c57600080fd5b610d7589610cb2565b9750610d8360208a01610cb2565b9650604089013595506060890135945060808901358015158114610da657600080fd5b935060a089013560ff81168114610dbc57600080fd5b979a969950949793969295929450505060c08201359160e0013590565b60008060408385031215610dec57600080fd5b610df583610cb2565b9150610e0360208401610cb2565b90509250929050565b6020808252601890820152775573622f696e73756666696369656e742d62616c616e636560401b604082015260600190565b6020808252601a908201527f5573622f696e73756666696369656e742d616c6c6f77616e6365000000000000604082015260600190565b602080825260129082015271155cd88bdb9bdd0b585d5d1a1bdc9a5e995960721b604082015260600190565b600060018201610ec157634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c90821680610edc57607f821691505b602082108103610efc57634e487b7160e01b600052602260045260246000fd5b5091905056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212200807bbc80accedac0cd6092b187789988630f3cbaff6f69c38837c5b55f12f6a64736f6c634300080d0033";

type UsbConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UsbConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Usb__factory extends ContractFactory {
  constructor(...args: UsbConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    chainId_: BigNumberish,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Usb> {
    return super.deploy(chainId_, symbol_, overrides || {}) as Promise<Usb>;
  }
  override getDeployTransaction(
    chainId_: BigNumberish,
    symbol_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(chainId_, symbol_, overrides || {});
  }
  override attach(address: string): Usb {
    return super.attach(address) as Usb;
  }
  override connect(signer: Signer): Usb__factory {
    return super.connect(signer) as Usb__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UsbInterface {
    return new utils.Interface(_abi) as UsbInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Usb {
    return new Contract(address, _abi, signerOrProvider) as Usb;
  }
}
