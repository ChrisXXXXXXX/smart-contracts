/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GemJoin,
  GemJoinInterface,
} from "../../../../contracts/makerdaoCore/join.sol/GemJoin";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vat_",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "ilk_",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "gem_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [],
    name: "Cage",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "usr",
        type: "address",
      },
    ],
    name: "Deny",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Exit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Join",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "usr",
        type: "address",
      },
    ],
    name: "Rely",
    type: "event",
  },
  {
    inputs: [],
    name: "cage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dec",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
    ],
    name: "deny",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "exit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gem",
    outputs: [
      {
        internalType: "contract GemLike",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ilk",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "join",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "live",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
    ],
    name: "rely",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vat",
    outputs: [
      {
        internalType: "contract VatLike",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "wards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161090b38038061090b83398101604081905261002f91610129565b3360009081526020818152604091829020600190819055600581905580546001600160a01b038781166001600160a01b0319928316179092556002869055600380549286169290911682179055825163313ce56760e01b81529251909263313ce5679260048281019391928290030181865afa1580156100b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d79190610165565b60045560405133907fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6090600090a250505061017e565b80516001600160a01b038116811461012457600080fd5b919050565b60008060006060848603121561013e57600080fd5b6101478461010d565b92506020840151915061015c6040850161010d565b90509250925092565b60006020828403121561017757600080fd5b5051919050565b61077e8061018d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063957aa58c11610071578063957aa58c146101215780639c52a7f114610138578063b3bcfa821461014b578063bf353dbb14610154578063c5ce281e14610174578063ef693bed1461017d57600080fd5b806336569e77146100ae5780633b4da69f146100de57806365fae35e146100f357806369245009146101065780637bd2bea71461010e575b600080fd5b6001546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16100ec366004610606565b610190565b005b6100f1610101366004610630565b610340565b6100f16103b4565b6003546100c1906001600160a01b031681565b61012a60055481565b6040519081526020016100d5565b6100f1610146366004610630565b610413565b61012a60045481565b61012a610162366004610630565b60006020819052908152604090205481565b61012a60025481565b6100f161018b366004610606565b610486565b6005546001146101da5760405162461bcd60e51b815260206004820152601060248201526f47656d4a6f696e2f6e6f742d6c69766560801b60448201526064015b60405180910390fd5b60008112156101fb5760405162461bcd60e51b81526004016101d190610652565b600154600254604051633e6e9fef60e11b81526001600160a01b0390921691637cdd3fde91610230918690869060040161067c565b600060405180830381600087803b15801561024a57600080fd5b505af115801561025e573d6000803e3d6000fd5b50506003546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b0390911692506323b872dd91506064016020604051808303816000875af11580156102b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102dd919061069b565b6102f95760405162461bcd60e51b81526004016101d1906106bd565b816001600160a01b03167fb4e09949657f21548b58afe74e7b86cd2295da5ff1598ae1e5faecb1cf19ca958260405161033491815260200190565b60405180910390a25050565b3360009081526020819052604090205460011461036f5760405162461bcd60e51b81526004016101d1906106ee565b6001600160a01b03811660008181526020819052604080822060019055517fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a609190a250565b336000908152602081905260409020546001146103e35760405162461bcd60e51b81526004016101d1906106ee565b600060058190556040517f2308ed18a14e800c39b86eb6ea43270105955ca385b603b64eca89f98ae8fbda9190a1565b336000908152602081905260409020546001146104425760405162461bcd60e51b81526004016101d1906106ee565b6001600160a01b038116600081815260208190526040808220829055517f184450df2e323acec0ed3b5c7531b81f9b4cdef7914dfd4c0a4317416bb5251b9190a250565b600160ff1b8111156104aa5760405162461bcd60e51b81526004016101d190610652565b6001546002546001600160a01b0390911690637cdd3fde90336104cc8561071e565b6040518463ffffffff1660e01b81526004016104ea9392919061067c565b600060405180830381600087803b15801561050457600080fd5b505af1158015610518573d6000803e3d6000fd5b505060035460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052909116925063a9059cbb91506044016020604051808303816000875af115801561056f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610593919061069b565b6105af5760405162461bcd60e51b81526004016101d1906106bd565b816001600160a01b03167f22d324652c93739755cf4581508b60875ebdd78c20c0cff5cf8e23452b2996318260405161033491815260200190565b80356001600160a01b038116811461060157600080fd5b919050565b6000806040838503121561061957600080fd5b610622836105ea565b946020939093013593505050565b60006020828403121561064257600080fd5b61064b826105ea565b9392505050565b60208082526010908201526f47656d4a6f696e2f6f766572666c6f7760801b604082015260600190565b9283526001600160a01b03919091166020830152604082015260600190565b6000602082840312156106ad57600080fd5b8151801515811461064b57600080fd5b60208082526017908201527623b2b6a537b4b717b330b4b632b216ba3930b739b332b960491b604082015260600190565b60208082526016908201527511d95b529bda5b8bdb9bdd0b585d5d1a1bdc9a5e995960521b604082015260600190565b6000600160ff1b820161074157634e487b7160e01b600052601160045260246000fd5b506000039056fea26469706673582212205daa139cc00d7bbe584e02a1cf9b004d021a48fd2a1ba42ad7f5b2d944dd7c4064736f6c634300080d0033";

type GemJoinConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GemJoinConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GemJoin__factory extends ContractFactory {
  constructor(...args: GemJoinConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vat_: string,
    ilk_: BytesLike,
    gem_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GemJoin> {
    return super.deploy(vat_, ilk_, gem_, overrides || {}) as Promise<GemJoin>;
  }
  override getDeployTransaction(
    vat_: string,
    ilk_: BytesLike,
    gem_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(vat_, ilk_, gem_, overrides || {});
  }
  override attach(address: string): GemJoin {
    return super.attach(address) as GemJoin;
  }
  override connect(signer: Signer): GemJoin__factory {
    return super.connect(signer) as GemJoin__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GemJoinInterface {
    return new utils.Interface(_abi) as GemJoinInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GemJoin {
    return new Contract(address, _abi, signerOrProvider) as GemJoin;
  }
}
