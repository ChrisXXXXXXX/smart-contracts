/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UrnHandler,
  UrnHandlerInterface,
} from "../../../contracts/DssCdpManager.sol/UrnHandler";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vat",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50604051610103380380610103833981016040819052602c916088565b6040516328ec8bf160e21b81523360048201526001600160a01b0382169063a3b22fc490602401600060405180830381600087803b158015606c57600080fd5b505af1158015607f573d6000803e3d6000fd5b505050505060b6565b600060208284031215609957600080fd5b81516001600160a01b038116811460af57600080fd5b9392505050565b603f806100c46000396000f3fe6080604052600080fdfea2646970667358221220a8b22645a7460a23901c3debb7262a91da2298999f4a8086c8914014dc6a017664736f6c634300080d0033";

type UrnHandlerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UrnHandlerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UrnHandler__factory extends ContractFactory {
  constructor(...args: UrnHandlerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vat: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UrnHandler> {
    return super.deploy(vat, overrides || {}) as Promise<UrnHandler>;
  }
  override getDeployTransaction(
    vat: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(vat, overrides || {});
  }
  override attach(address: string): UrnHandler {
    return super.attach(address) as UrnHandler;
  }
  override connect(signer: Signer): UrnHandler__factory {
    return super.connect(signer) as UrnHandler__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UrnHandlerInterface {
    return new utils.Interface(_abi) as UrnHandlerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UrnHandler {
    return new Contract(address, _abi, signerOrProvider) as UrnHandler;
  }
}
